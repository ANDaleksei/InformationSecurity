//
//  Tests.swift
//  InformationSecurity_AES
//
//  Created by Oleksii Andriushchenko on 05.10.2020.
//

import Foundation

func testAes() {
  let key = Data([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f])
  let input = Data([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff])
  let expectedEncryptedData = Data([0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a])
  let aesData = AesAlgorithm(key: key)
  let actualEncyptedData = aesData.encrypt(data: input)
  assert(actualEncyptedData == expectedEncryptedData)
  let decryptedData: Data = aesData.decrypt(data: expectedEncryptedData)
  assert(decryptedData == input)
}

func testKalynaConfig1Encryption() {
  let kalyna = KalynaAlgorithm(
    key: Data([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F]),
    config: .config1
  )
  let encryptedData = kalyna.encrypt(data: Data([0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F]))
  assert(encryptedData == Data([0x81, 0xBF, 0x1C, 0x7D, 0x77, 0x9B, 0xAC, 0x20, 0xE1, 0xC9, 0xEA, 0x39, 0xB4, 0xD2, 0xAD, 0x06]))
}

func testKalynaConfig1Decryption() {
  let kalyna = KalynaAlgorithm(
    key: Data([0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00]),
    config: .config1
  )
  let encryptedData: Data = kalyna.decrypt(data: Data([0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10]))
  assert(encryptedData == Data([0x72, 0x91, 0xEF, 0x2B, 0x47, 0x0C, 0xC7, 0x84, 0x6F, 0x09, 0xC2, 0x30, 0x39, 0x73, 0xDA, 0xD7]))
}

func testKalynaConfig2Encryption() {
  let kalyna = KalynaAlgorithm(
    key: Data([
      0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
      0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
    ]),
    config: .config2
  )
  let encryptedData = kalyna.encrypt(data: Data([0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F]))
  assert(encryptedData == Data([0x58, 0xEC, 0x3E, 0x09, 0x10, 0x00, 0x15, 0x8A, 0x11, 0x48, 0xF7, 0x16, 0x6F, 0x33, 0x4F, 0x14]))
}

func testKalynaConfig2Decryption() {
  let kalyna = KalynaAlgorithm(
    key: Data([
      0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
      0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00
    ]),
    config: .config2
  )
  let encryptedData: Data = kalyna.decrypt(data: Data([0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20]))
  assert(encryptedData == Data([0xF3, 0x6D, 0xB4, 0x56, 0xCE, 0xFD, 0xDF, 0xE1, 0xB4, 0x5B, 0x5F, 0x70, 0x30, 0xCA, 0xD9, 0x96]))
}
