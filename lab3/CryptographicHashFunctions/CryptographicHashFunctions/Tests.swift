//
//  Tests.swift
//  CryptographicHashFunctions
//
//  Created by Oleksii Andriushchenko on 23.10.2020.
//

import Foundation

func testSHA256_case1() {
  let sha256 = SHA256()
  let data = sha256.hash(data: "abc".data(using: .utf8)!)
  assert(data == Data([
          0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea,
          0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23,
          0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c,
          0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad
  ]))
}

func testSHA256_case2() {
  let sha256 = SHA256()
  let data = sha256.hash(data: "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq".data(using: .utf8)!)
  assert(data == Data([
          0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8,
          0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,
          0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67,
          0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1
  ]))
}

func testKupyna256_case1() {
  let kupyna = Kupyna(s: 32)
  let bytes: [UInt8] = [
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
  ]
  let hash = kupyna.hash(data: Data(bytes))
  assert(
    hash == Data([0x08, 0xF4, 0xEE, 0x6F, 0x1B, 0xE6, 0x90, 0x3B,
             0x32, 0x4C, 0x4E, 0x27, 0x99, 0x0C, 0xB2, 0x4E,
             0xF6, 0x9D, 0xD5, 0x8D, 0xBE, 0x84, 0x81, 0x3E,
             0xE0, 0xA5, 0x2F, 0x66, 0x31, 0x23, 0x98, 0x75])
  )
}

func testKupyna256_case2() {
  let kupyna = Kupyna(s: 32)
  let bytes: [UInt8] = [
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
  ]
  let hash = kupyna.hash(data: Data(bytes))
  assert(
    hash == Data(
      [
        0x0A, 0x94, 0x74, 0xE6, 0x45, 0xA7, 0xD2, 0x5E,
        0x25, 0x5E, 0x9E, 0x89, 0xFF, 0xF4, 0x2E, 0xC7,
        0xEB, 0x31, 0x34, 0x90, 0x07, 0x05, 0x92, 0x84,
        0xF0, 0xB1, 0x82, 0xE4, 0x52, 0xBD, 0xA8, 0x82
      ]
    )
  )
}

func testKupyna256_case3() {
  let kupyna = Kupyna(s: 32)
  let bytes: [UInt8] = [0xff]
  let hash = kupyna.hash(data: Data(bytes))
  assert(
    hash == Data(
      [
        0xEA, 0x76, 0x77, 0xCA, 0x45, 0x26, 0x55, 0x56,
        0x80, 0x44, 0x1C, 0x11, 0x79, 0x82, 0xEA, 0x14,
        0x05, 0x9E, 0xA6, 0xD0, 0xD7, 0x12, 0x4D, 0x6E,
        0xCD, 0xB3, 0xDE, 0xEC, 0x49, 0xE8, 0x90, 0xF4
      ]
    )
  )
}

func testKupyna256_case4() {
  let kupyna = Kupyna(s: 32)
  let bytes: [UInt8] = []
  let hash = kupyna.hash(data: Data(bytes))
  assert(
    hash == Data(
      [
        0xCD, 0x51, 0x01, 0xD1, 0xCC, 0xDF, 0x0D, 0x1D,
        0x1F, 0x4A, 0xDA, 0x56, 0xE8, 0x88, 0xCD, 0x72,
        0x4C, 0xA1, 0xA0, 0x83, 0x8A, 0x35, 0x21, 0xE7,
        0x13, 0x1D, 0x4F, 0xB7, 0x8D, 0x0F, 0x5E, 0xB6
      ]
    )
  )
}
